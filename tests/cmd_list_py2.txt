# create project and log
aliyun log create_project --project_name="dlq-test-cli-${RANDOM_NUMBER}" --project_des="testdata1"

sleep 60

aliyun log list_project
> 'projectName': 'dlq-test-cli-${RANDOM_NUMBER}'

aliyun log create_logstore --project_name="dlq-test-cli-${RANDOM_NUMBER}" --logstore_name="logstore1" --ttl=2 --shard_count="2"

aliyun log create_logstore --project_name="dlq-test-cli-${RANDOM_NUMBER}" --logstore_name="logstore2" --ttl=2 --shard_count="2"

aliyun log create_logstore --project_name="dlq-test-cli-${RANDOM_NUMBER}" --logstore_name="logstore3" --ttl=2 --shard_count="2"


# create index
aliyun log create_index --project_name="dlq-test-cli-${RANDOM_NUMBER}" --logstore_name="logstore1" --index_detail="file://create_index.json"


# craete relative items
aliyun log create_logtail_config --project_name="dlq-test-cli-${RANDOM_NUMBER}" --config_detail="{\"config_name\": \"config_name1\", \"logstore_name\": \"logstore1\", \"file_pattern\": \"file_pattern\", \"time_format\": \"%Y-%m-%d %H:%M:%S\", \"log_path\": \"/log_path\", \"endpoint\": \"endpoint\", \"log_parse_regex\": \"xxx ([\\\\w\\\\-]+\\\\s[\\\\d\\\\:]+)\\\\s+(.*)\", \"log_begin_regex\": \"xxx.*\", \"reg_keys\": [\"reg_key1\",\"reg_key2\"], \"topic_format\":\"none\", \"filter_keys\": [\"time\",\"value\"], \"filter_keys_reg\":[\"time\",\"value\"], \"logSample\":\"xxx 2017-11-11 11:11:11 hello alicloud.\"}"

aliyun log create_logtail_config --project_name="dlq-test-cli-${RANDOM_NUMBER}" --config_detail="file://./create_logtail_config_file.json"

aliyun log create_machine_group --project_name="dlq-test-cli-${RANDOM_NUMBER}" --group_detail="{\"machine_list\": [\"machine1\", \"machine2\"], \"machine_type\": \"userdefined\", \"group_name\": \"group_name1\", \"group_type\":\"Armory\", \"group_attribute\": {\"externalName\":\"ex name\", \"groupTopic\":\"topic x\"} }"

aliyun log create_machine_group --project_name="dlq-test-cli-${RANDOM_NUMBER}" --group_detail="file://./create_machine_group.json"

aliyun log create_consumer_group --project="dlq-test-cli-${RANDOM_NUMBER}" --logstore="logstore1" --consumer_group="consumer_group1" --timeout=20 --in_order="true"

aliyun log create_shipper --project_name="dlq-test-cli-${RANDOM_NUMBER}" --logstore_name="logstore1" --shipper_name="shipper1" --shipper_type="oss" --shipper_config="file://create_oss_shipper_config.json"
> {"errorCode":"Unauthorized","errorMessage":"denied by sts or ram, action: ram:PassRole, resource: acs:ram::1234:role/aliyunlogdefaultrole"}

# apply machine group
aliyun log apply_config_to_machine_group --project_name="dlq-test-cli-${RANDOM_NUMBER}" --config_name="config_name1" --group_name="group_name1"

aliyun log get_project --project_name="dlq-test-cli-${RANDOM_NUMBER}"
> 'status': 'Normal', 'description': 'testdata1', 'projectName': 'dlq-test-cli-${RANDOM_NUMBER}'

aliyun log get_logstore --project_name="dlq-test-cli-${RANDOM_NUMBER}" --logstore_name="logstore2"
> 'logstoreName': 'logstore2', 'shardCount': 2

aliyun log get_logtail_config --project_name="dlq-test-cli-${RANDOM_NUMBER}" --config_name="config_name1"
> 'configName': 'config_name1'
> 'outputType': 'LogService', 'inputType': 'file', 'logSample': 'xxx 2017-11-11 11:11:11 hello alicloud.'
> 'inputDetail': {'sensitive_keys': [], 'enableRawLog': False, 'logType': 'common_reg_log', 'filterRegex': ['time', 'value'], 'mergeType': 'topic', 'regex': 'xxx ([\\w\\-]+\\s[\\d\\:]+)\\s+(.*)', 'sendRateExpire': 0, 'discardNonUtf8': False, 'maxSendRate': -1, 'preserveDepth': 0, 'localStorage': True, 'logTimezone': '', 'preserve': True, 'delayAlarmBytes': 0, 'discardUnmatch': True, 'logPath': '/log_path', 'topicFormat': 'none', 'maxDepth': 1000, 'key': ['reg_key1', 'reg_key2'], 'filePattern': 'file_pattern', 'timeFormat': '%Y-%m-%d %H:%M:%S', 'filterKey': ['time', 'value'], 'tailExisted': False, 'adjustTimezone': False, 'logBeginRegex': 'xxx.*', 'fileEncoding': 'utf8', 'enableTag': False}



aliyun log get_config_applied_machine_groups --project_name="dlq-test-cli-${RANDOM_NUMBER}" --config_name="config_name1"
> {'count': 1, 'machinegroups': ['group_name1']}

aliyun log get_index_config --project_name="dlq-test-cli-${RANDOM_NUMBER}" --logstore_name="logstore1"
> 'keys': {'key3': {'caseSensitive': False, 'token': [',', ' ', '"', '"', ';', '=', '(', ')', '[', ']', '{', '}', '?', '@', '&', '<', '>', '/', ':', '\n', '\t'], 'type': 'text', 'doc_value': True}, 'key2': {'caseSensitive': False, 'token': [',', ' ', '"', '"', ';', '=', '(', ')', '[', ']', '{', '}', '?', '@', '&', '<', '>', '/', ':', '\n', '\t'], 'type': 'text', 'doc_value': True}, 'key1': {'caseSensitive': False, 'token': [',', ' ', '"', '"', ';', '=', '(', ')', '[', ']', '{', '}', '?', '@', '&', '<', '>', '/', ':', '\n', '\t'], 'type': 'text', 'doc_value': True}, 'key4': {'caseSensitive': False, 'token': [',', ' ', '"', '"', ';', '=', '(', ')', '[', ']', '{', '}', '?', '@', '&', '<', '>', '/', ':', '\n', '\t'], 'type': 'text', 'doc_value': True}}
> 'ttl': 2, 'index_mode': 'v2', 'line': {'caseSensitive': False, 'token': [',', ' ', '"', '"', ';', '=', '(', ')', '[', ']', '{', '}', '?', '@', '&', '<', '>', '/', ':', '\n', '\t']}


aliyun log get_machine_group --project_name="dlq-test-cli-${RANDOM_NUMBER}" --group_name="group_name1"
> {'groupType': 'Armory', 'groupAttribute': {'externalName': 'ex name', 'groupTopic': 'topic x'}, 'machineList': ['machine1', 'machine2'], 'groupName': 'group_name1',
> 'machineIdentifyType': 'userdefined'

aliyun log get_machine_group_applied_configs --project_name="dlq-test-cli-${RANDOM_NUMBER}" --group_name="group_name1"
> {'count': 1, 'configs': ['config_name1']}

aliyun log get_shipper_config --project_name="dlq-test-cli-${RANDOM_NUMBER}" --logstore_name="logstore1" --shipper_name="shipper1"
> {"errorCode":"ParameterInvalid","errorMessage":"shipperName shipper1 not exist"}

aliyun log get_shipper_tasks --project_name="dlq-test-cli-${RANDOM_NUMBER}" --logstore_name="logstore1" --shipper_name="shipper1" --start_time=1510300126 --end_time=1510304126 --status_type="success" --offset=0 --size=100
> {"errorCode":"ParameterInvalid","errorMessage":"only support query last 48 hours task status"}

# need to sleep for 60 seconds
sleep 90


aliyun log get_begin_cursor --project_name="dlq-test-cli-${RANDOM_NUMBER}" --logstore_name="logstore1" --shard_id=0
> {'cursor': 'MTU

aliyun log get_cursor --project_name="dlq-test-cli-${RANDOM_NUMBER}" --logstore_name="logstore1" --shard_id=0 --start_time=111111
> {'cursor': 'MTU

aliyun log get_cursor_time --project_name="dlq-test-cli-${RANDOM_NUMBER}" --logstore_name="logstore1" --shard_id=0 --cursor="MTUxMDMwODcyMDA5NjE0Mzg1MQ=="
> {"errorCode":"InvalidCursor","errorMessage":""}

aliyun log get_previous_cursor_time --project_name="dlq-test-cli-${RANDOM_NUMBER}" --logstore_name="logstore1" --shard_id=0 --cursor="MTUxMDMwODcyMDA5NjE0Mzg1MQ=="

aliyun log get_end_cursor --project_name="dlq-test-cli-${RANDOM_NUMBER}" --logstore_name="logstore1" --shard_id=0
> {'cursor': 'MTU


##########
# put logs
# prepare request json
rm -f ./put_logs_${RANDOM_NUMBER}.json
echo "{\"project\": \"dlq-test-cli-${RANDOM_NUMBER}\",\"logstore\": \"logstore1\",\"topic\": \"topic1\",\"source\": \"source1\",\"logtags\": [ [\"tag1\", \"v1\"], [\"tag2\", \"v2\"]],\"hashKey\": \"1231231234\",\"logitems\": [{\"timestamp\": ${TIME-ONE-HOUR-AGO},\"contents\": [[\"key1\", \"v1\"],[\"key2\", \"v2\"]]},{\"timestamp\": ${TIME-ONE-HOUR-AGO},\"contents\": [[\"key3\", \"v3\"],[\"key4\", \"v4\"]]}]}" >> put_logs_${RANDOM_NUMBER}.json
aliyun log put_logs --request="file://./put_logs_${RANDOM_NUMBER}.json"
sleep 10
###########



##########
# put logs compress=True
# prepare request json
rm -f ./put_logs_${RANDOM_NUMBER}.json
echo "{\"compress\": \"true\", \"project\": \"dlq-test-cli-${RANDOM_NUMBER}\",\"logstore\": \"logstore2\",\"topic\": \"topic1\",\"source\": \"source1\",\"logtags\": [ [\"tag1\", \"v1\"], [\"tag2\", \"v2\"]],\"hashKey\": \"1231231234\",\"logitems\": [{\"timestamp\": ${TIME-ONE-HOUR-AGO},\"contents\": [[\"key1\", \"v1\"],[\"key2\", \"v2\"]]},{\"timestamp\": ${TIME-ONE-HOUR-AGO},\"contents\": [[\"key3\", \"v3\"],[\"key4\", \"v4\"]]}]}" >> put_logs_${RANDOM_NUMBER}.json
aliyun log put_logs --request="file://./put_logs_${RANDOM_NUMBER}.json"
###########


# get logs
aliyun log get_logs --request="{\"topic\": \"\", \"logstore\": \"logstore1\", \"project\": \"dlq-test-cli-${RANDOM_NUMBER}\", \"toTime\": \"${TIME-NOW}\", \"offset\": \"0\", \"query\": \"*\", \"line\": \"10\", \"fromTime\": \"${TIME-ONE-HOUR-AGO}\", \"reverse\":\"false\"}"
> {'__tag__:tag2': 'v2', '__tag__:tag1': 'v1', '__source__': 'source1', 'key1': 'v1', '__time__': '${TIME-ONE-HOUR-AGO}', '__topic__': 'topic1', 'key2': 'v2'}
> {'__tag__:tag2': 'v2', '__tag__:tag1': 'v1', 'key3': 'v3', '__source__': 'source1', '__topic__': 'topic1', 'key4': 'v4', '__time__': '${TIME-ONE-HOUR-AGO}'}


rm -f ./get_logs_${RANDOM_NUMBER}.json
echo "{\"topic\": \"\",\"logstore\": \"logstore1\",\"project\": \"dlq-test-cli-${RANDOM_NUMBER}\",\"toTime\": \"${TIME-NOW}\",\"offset\": \"0\",\"query\": \"*\",\"line\": \"10\",\"fromTime\": \"${TIME-ONE-HOUR-AGO}\",\"reverse\": \"true\"}" >> ./get_logs_${RANDOM_NUMBER}.json
aliyun log get_logs --request="file://./get_logs_${RANDOM_NUMBER}.json"
> {'__tag__:tag2': 'v2', '__tag__:tag1': 'v1', '__source__': 'source1', 'key1': 'v1', '__time__': '${TIME-ONE-HOUR-AGO}', '__topic__': 'topic1', 'key2': 'v2'}
> {'__tag__:tag2': 'v2', '__tag__:tag1': 'v1', 'key3': 'v3', '__source__': 'source1', '__topic__': 'topic1', 'key4': 'v4', '__time__': '${TIME-ONE-HOUR-AGO}'}


rm -f ./get_project_logs_${RANDOM_NUMBER}.json
echo "{\"project\": \"dlq-test-cli-${RANDOM_NUMBER}\",\"query\": \"select * from logstore1 where __time__ >= ${TIME-ONE-HOUR-AGO} and __time__ <= ${TIME-NOW}\"}" >> ./get_project_logs_${RANDOM_NUMBER}.json
aliyun log get_project_logs --request="file://./get_project_logs_${RANDOM_NUMBER}.json"
> 'key3': 'null', 'key2': 'v2', 'key1': 'v1', '__time__': '${TIME-ONE-HOUR-AGO}', '__topic__': 'topic1', '__line__': 'null', 'key4': 'null', '__date__': 'null', '__source__': 'source1'
> 'key3': 'v3', 'key2': 'null', 'key1': 'null', '__time__': '${TIME-ONE-HOUR-AGO}', '__topic__': 'topic1', '__line__': 'null', 'key4': 'v4', '__date__': 'null', '__source__': 'source1'


aliyun log get_histograms --request="{\"project\": \"dlq-test-cli-${RANDOM_NUMBER}\", \"logstore\": \"logstore1\", \"topic\": \"topic1\", \"fromTime\": \"${TIME-ONE-HOUR-AGO}\", \"toTime\": \"${TIME-NOW}\"}"


aliyun log pull_logs --project_name="dlq-test-cli-${RANDOM_NUMBER}" --logstore_name="logstore1" --shard_id=0 --cursor="MTUxMDMwODcyMDA5NjE0Mzg1MQ==" --count="10" --end_cursor="MTUxMDMwODcyMDA5NjE0Mzg1MQ==" --compress="false"

#test compression
aliyun log pull_logs --project_name="dlq-test-cli-${RANDOM_NUMBER}" --logstore_name="logstore1" --shard_id=0 --cursor="MTUxMDMwODcyMDA5NjE0Mzg1MQ==" --count="10" --end_cursor="MTUxMDMwODcyMDA5NjE0Mzg1MQ==" --compress="true"


aliyun log list_consumer_group --project="dlq-test-cli-${RANDOM_NUMBER}" --logstore="logstore1"
> [{'name': 'consumer_group1', 'timeout': 20, 'order': True}]

aliyun log list_logstore --project_name="dlq-test-cli-${RANDOM_NUMBER}" --logstore_name_pattern="testdata1" --offset=0 --size=100
> {'count': 3, 'logstores': ['logstore3', 'logstore1', 'logstore2'], 'total': 3}

aliyun log list_logtail_config --project_name="dlq-test-cli-${RANDOM_NUMBER}" --offset=0 --size=100
> {'count': 2, 'configs': ['config_name1', 'config_name2'], 'total': 2}

aliyun log list_machine_group --project_name="dlq-test-cli-${RANDOM_NUMBER}" --offset=0 --size=100
> {'count': 2, 'machinegroups': ['group_name1', 'group_name2'], 'total': 2}

aliyun log list_machines --project_name="dlq-test-cli-${RANDOM_NUMBER}" --group_name="group_name1" --offset=0 --size=100
> {'count': 0, 'total': 0, 'machines': []}

aliyun log list_shards --project_name="dlq-test-cli-${RANDOM_NUMBER}" --logstore_name="logstore2"
> [{'shardID': 0, 'status': 'readwrite', 'inclusiveBeginKey': '00000000000000000000000000000000',
> 'exclusiveEndKey': '80000000000000000000000000000000'}, {'shardID': 1, 'status': 'readwrite', 'inclusiveBeginKey': '80000000000000000000000000000000',
> 'exclusiveEndKey': 'ffffffffffffffffffffffffffffffff'}]


aliyun log list_shipper --project_name="dlq-test-cli-${RANDOM_NUMBER}" --logstore_name="logstore2"
> {'count': 0, 'total': 0, 'shipper': []}

aliyun log list_logstores --request={\"project\":\"dlq-test-cli-${RANDOM_NUMBER}\"}
> {'count': 3, 'logstores': ['logstore3', 'logstore1', 'logstore2'], 'total': 3}

aliyun log list_topics --request="{\"project\":\"dlq-test-cli-${RANDOM_NUMBER}\", \"logstore\":\"logstore1\", \"token\":\"token1212\", \"line\":123}"
> ['topic1']


aliyun log merge_shard --project_name="dlq-test-cli-${RANDOM_NUMBER}" --logstore_name="logstore2" --shardId="0"
> [{'shardID': 2, 'status': 'readwrite', 'inclusiveBeginKey': '00000000000000000000000000000000',
> 'exclusiveEndKey': 'ffffffffffffffffffffffffffffffff'}, {'shardID': 0, 'status': 'readonly', 'inclusiveBeginKey': '00000000000000000000000000000000',
> 'exclusiveEndKey': '80000000000000000000000000000000'}, {'shardID': 1, 'status': 'readonly', 'inclusiveBeginKey': '80000000000000000000000000000000',
> 'exclusiveEndKey': 'ffffffffffffffffffffffffffffffff'}]

aliyun log split_shard --project_name="dlq-test-cli-${RANDOM_NUMBER}" --logstore_name="logstore3" --shardId="0" --split_hash="40000000000000000000000000000000"
> [{'shardID': 0, 'status': 'readonly', 'inclusiveBeginKey': '00000000000000000000000000000000',
> 'exclusiveEndKey': '80000000000000000000000000000000'}, {'shardID': 2, 'status': 'readwrite', 'inclusiveBeginKey': '00000000000000000000000000000000',
> 'exclusiveEndKey': '40000000000000000000000000000000'}, {'shardID': 3, 'status': 'readwrite', 'inclusiveBeginKey': '40000000000000000000000000000000',
> 'exclusiveEndKey': '80000000000000000000000000000000'}]

# check-point
aliyun log update_check_point --project="dlq-test-cli-${RANDOM_NUMBER}" --logstore="logstore1" --consumer_group="consumer_group1" --shard="0" --check_point="MTUxMDMwODcyMDA5NjE0Mzg1MQ==" --consumer="testdata1" --force_success="true"


aliyun log update_index --project_name="dlq-test-cli-${RANDOM_NUMBER}" --logstore_name="logstore1" --index_detail="file://create_index.json"


aliyun log update_consumer_group --project="dlq-test-cli-${RANDOM_NUMBER}" --logstore="logstore1" --consumer_group="consumer_group1" --timeout=20 --in_order="true"


aliyun log update_logstore --project_name="dlq-test-cli-${RANDOM_NUMBER}" --logstore_name="logstore2" --ttl=3 --shard_count="3"

aliyun log update_logtail_config --project_name="dlq-test-cli-${RANDOM_NUMBER}" --config_detail="file://./create_logtail_config_file.json"
aliyun log update_machine_group --project_name="dlq-test-cli-${RANDOM_NUMBER}" --group_detail="file://./create_machine_group.json"
aliyun log update_shipper --project_name="dlq-test-cli-${RANDOM_NUMBER}" --logstore_name="logstore1" --shipper_name="shipper" --shipper_type="oss" --shipper_config="file://create_oss_shipper_config.json"
> {"errorCode":"Unauthorized","errorMessage":"denied by sts or ram, action: ram:PassRole, resource: acs:ram::1234:role/aliyunlogdefaultrole"}


aliyun log retry_shipper_tasks --project_name="dlq-test-cli-${RANDOM_NUMBER}" --logstore_name="logstore1" --shipper_name="shipper1" --task_list="[\"task1\",\"task2\"]"
> {"errorCode":"ParameterInvalid","errorMessage":"shipperName shipper1 not exist"}

aliyun log get_check_point --project="dlq-test-cli-${RANDOM_NUMBER}" --logstore="logstore1" --consumer_group="consumer_group1" --shard="0"
> [{'checkpoint': 'MTU


# copy project
aliyun log copy_project --from_project="dlq-test-cli-${RANDOM_NUMBER}" --to_project="dlq-test-cli-${RANDOM_NUMBER}-copied"


# clean up
aliyun log remove_config_to_machine_group --project_name="dlq-test-cli-${RANDOM_NUMBER}" --config_name="config_name1" --group_name="group_name1"

aliyun log delete_logtail_config --project_name="dlq-test-cli-${RANDOM_NUMBER}" --config_name="config_name1"

aliyun log delete_logtail_config --project_name="dlq-test-cli-${RANDOM_NUMBER}" --config_name="config_name2"

aliyun log delete_machine_group --project_name="dlq-test-cli-${RANDOM_NUMBER}" --group_name="group_name1"

aliyun log delete_machine_group --project_name="dlq-test-cli-${RANDOM_NUMBER}" --group_name="group_name2"

aliyun log delete_consumer_group --project="dlq-test-cli-${RANDOM_NUMBER}" --logstore="logstore1" --consumer_group="consumer_group1"

aliyun log delete_shipper --project_name="dlq-test-cli-${RANDOM_NUMBER}" --logstore_name="logstore1" --shipper_name="shipper1"
> {"errorCode":"ParameterInvalid","errorMessage":"shipperName shipper1 not exist"}

aliyun log delete_index --project_name="dlq-test-cli-${RANDOM_NUMBER}" --logstore_name="logstore1"

aliyun log delete_logstore --project_name="dlq-test-cli-${RANDOM_NUMBER}" --logstore_name="logstore1"

aliyun log delete_logstore --project_name="dlq-test-cli-${RANDOM_NUMBER}" --logstore_name="logstore2"

aliyun log delete_logstore --project_name="dlq-test-cli-${RANDOM_NUMBER}" --logstore_name="logstore3"

aliyun log delete_project --project_name="dlq-test-cli-${RANDOM_NUMBER}"

# clean up copied project
aliyun log remove_config_to_machine_group --project_name="dlq-test-cli-${RANDOM_NUMBER}-copied" --config_name="config_name1" --group_name="group_name1"

aliyun log delete_logtail_config --project_name="dlq-test-cli-${RANDOM_NUMBER}-copied" --config_name="config_name1"

aliyun log delete_logtail_config --project_name="dlq-test-cli-${RANDOM_NUMBER}-copied" --config_name="config_name2"

aliyun log delete_machine_group --project_name="dlq-test-cli-${RANDOM_NUMBER}-copied" --group_name="group_name1"

aliyun log delete_machine_group --project_name="dlq-test-cli-${RANDOM_NUMBER}-copied" --group_name="group_name2"

aliyun log delete_index --project_name="dlq-test-cli-${RANDOM_NUMBER}-copied" --logstore_name="logstore1"

aliyun log delete_logstore --project_name="dlq-test-cli-${RANDOM_NUMBER}-copied" --logstore_name="logstore1"

aliyun log delete_logstore --project_name="dlq-test-cli-${RANDOM_NUMBER}-copied" --logstore_name="logstore2"

aliyun log delete_logstore --project_name="dlq-test-cli-${RANDOM_NUMBER}-copied" --logstore_name="logstore3"

sleep 40

aliyun log delete_project --project_name="dlq-test-cli-${RANDOM_NUMBER}-copied"

aliyun configure access_id access_key endpoint123

cat ~/.aliyunlogcli
> [main]
> access-id = access_id
> access-key = access_key
> region-endpoint = endpoint123


aliyun configure a b c xyz

cat ~/.aliyunlogcli
> [main]
> access-id = access_id
> access-key = access_key
> region-endpoint = endpoint123
> [xyz]
> access-id = a
> access-key = b
> region-endpoint = c




